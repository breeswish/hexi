// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsx.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FsxProtocol {

  /// <summary>Holder for reflection information generated from fsx.proto</summary>
  public static partial class FsxReflection {

    #region Descriptor
    /// <summary>File descriptor for fsx.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FsxReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cglmc3gucHJvdG8SC0ZzeFByb3RvY29sIuwDChFUY3BSZXF1ZXN0TWVzc2Fn",
            "ZRI3Cgdtc2dUeXBlGAEgASgOMiYuRnN4UHJvdG9jb2wuVGNwUmVxdWVzdE1l",
            "c3NhZ2UuTXNnVHlwZRJFCg1zZXRDb25maWdCb2R5GAIgASgLMiwuRnN4UHJv",
            "dG9jb2wuVGNwUmVxdWVzdE1lc3NhZ2UuU2V0Q29uZmlnQm9keUgAEjsKCHBp",
            "bmdCb2R5GAMgASgLMicuRnN4UHJvdG9jb2wuVGNwUmVxdWVzdE1lc3NhZ2Uu",
            "UGluZ0JvZHlIABJDCgx0ZXN0Q29ubkJvZHkYBCABKAsyKy5Gc3hQcm90b2Nv",
            "bC5UY3BSZXF1ZXN0TWVzc2FnZS5UZXN0Q29ubkJvZHlIABoyCg1TZXRDb25m",
            "aWdCb2R5Eg8KB3VkcFBvcnQYASABKAUSEAoIdWRwVG9rZW4YAiABKAUaHQoI",
            "UGluZ0JvZHkSEQoJdGltZVN0YW1wGAEgASgFGiIKDFRlc3RDb25uQm9keRIS",
            "CgptYWdpY1Rva2VuGAEgASgFIlMKB01zZ1R5cGUSFwoTTVNHX1RZUEVfU0VU",
            "X0NPTkZJRxAAEhEKDU1TR19UWVBFX1BJTkcQARIcChhNU0dfVFlQRV9URVNU",
            "X0NPTk5FQ1RJT04QAkIJCgdtc2dCb2R5IjgKElRjcFJlc3BvbnNlTWVzc2Fn",
            "ZRIPCgdzdWNjZXNzGAEgASgIEhEKCXRpbWVTdGFtcBgCIAEoBSLIBAoSVWRw",
            "UmVzcG9uc2VNZXNzYWdlEjgKB21zZ1R5cGUYASABKA4yJy5Gc3hQcm90b2Nv",
            "bC5VZHBSZXNwb25zZU1lc3NhZ2UuTXNnVHlwZRIUCgxzZXJpYWxOdW1iZXIY",
            "AiABKAUSDQoFdG9rZW4YAyABKAUSVAoUdGVzdENvbm5DYWxsYmFja0JvZHkY",
            "BCABKAsyNC5Gc3hQcm90b2NvbC5VZHBSZXNwb25zZU1lc3NhZ2UuVGVzdENv",
            "bm5DYWxsYmFja0JvZHlIABJUChR0cmFuc21pc3Npb25EYXRhQm9keRgFIAEo",
            "CzI0LkZzeFByb3RvY29sLlVkcFJlc3BvbnNlTWVzc2FnZS5UcmFuc21pc3Np",
            "b25EYXRhQm9keUgAGioKFFRlc3RDb25uQ2FsbGJhY2tCb2R5EhIKCm1hZ2lj",
            "VG9rZW4YASABKAUanQEKFFRyYW5zbWlzc2lvbkRhdGFCb2R5EhUKDXhBY2Nl",
            "bGVyYXRpb24YASABKAESFQoNeUFjY2VsZXJhdGlvbhgCIAEoARIVCg16QWNj",
            "ZWxlcmF0aW9uGAMgASgBEhUKDXBpdGNoVmVsb2NpdHkYBCABKAESFAoMcm9s",
            "bFZlbG9jaXR5GAUgASgBEhMKC3lhd1ZlbG9jaXR5GAYgASgBIlAKB01zZ1R5",
            "cGUSJQohTVNHX1RZUEVfVEVTVF9DT05ORUNUSU9OX0NBTExCQUNLEAASHgoa",
            "TVNHX1RZUEVfVFJBTlNNSVNTSU9OX0RBVEEQAUIJCgdtc2dCb2R5YgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.TcpRequestMessage), global::FsxProtocol.TcpRequestMessage.Parser, new[]{ "MsgType", "SetConfigBody", "PingBody", "TestConnBody" }, new[]{ "MsgBody" }, new[]{ typeof(global::FsxProtocol.TcpRequestMessage.Types.MsgType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody), global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody.Parser, new[]{ "UdpPort", "UdpToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.TcpRequestMessage.Types.PingBody), global::FsxProtocol.TcpRequestMessage.Types.PingBody.Parser, new[]{ "TimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.TcpRequestMessage.Types.TestConnBody), global::FsxProtocol.TcpRequestMessage.Types.TestConnBody.Parser, new[]{ "MagicToken" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.TcpResponseMessage), global::FsxProtocol.TcpResponseMessage.Parser, new[]{ "Success", "TimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.UdpResponseMessage), global::FsxProtocol.UdpResponseMessage.Parser, new[]{ "MsgType", "SerialNumber", "Token", "TestConnCallbackBody", "TransmissionDataBody" }, new[]{ "MsgBody" }, new[]{ typeof(global::FsxProtocol.UdpResponseMessage.Types.MsgType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody), global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody.Parser, new[]{ "MagicToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody), global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody.Parser, new[]{ "XAcceleration", "YAcceleration", "ZAcceleration", "PitchVelocity", "RollVelocity", "YawVelocity" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TcpRequestMessage : pb::IMessage<TcpRequestMessage> {
    private static readonly pb::MessageParser<TcpRequestMessage> _parser = new pb::MessageParser<TcpRequestMessage>(() => new TcpRequestMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpRequestMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FsxProtocol.FsxReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpRequestMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpRequestMessage(TcpRequestMessage other) : this() {
      msgType_ = other.msgType_;
      switch (other.MsgBodyCase) {
        case MsgBodyOneofCase.SetConfigBody:
          SetConfigBody = other.SetConfigBody.Clone();
          break;
        case MsgBodyOneofCase.PingBody:
          PingBody = other.PingBody.Clone();
          break;
        case MsgBodyOneofCase.TestConnBody:
          TestConnBody = other.TestConnBody.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpRequestMessage Clone() {
      return new TcpRequestMessage(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private global::FsxProtocol.TcpRequestMessage.Types.MsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.TcpRequestMessage.Types.MsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "setConfigBody" field.</summary>
    public const int SetConfigBodyFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody SetConfigBody {
      get { return msgBodyCase_ == MsgBodyOneofCase.SetConfigBody ? (global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody) msgBody_ : null; }
      set {
        msgBody_ = value;
        msgBodyCase_ = value == null ? MsgBodyOneofCase.None : MsgBodyOneofCase.SetConfigBody;
      }
    }

    /// <summary>Field number for the "pingBody" field.</summary>
    public const int PingBodyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.TcpRequestMessage.Types.PingBody PingBody {
      get { return msgBodyCase_ == MsgBodyOneofCase.PingBody ? (global::FsxProtocol.TcpRequestMessage.Types.PingBody) msgBody_ : null; }
      set {
        msgBody_ = value;
        msgBodyCase_ = value == null ? MsgBodyOneofCase.None : MsgBodyOneofCase.PingBody;
      }
    }

    /// <summary>Field number for the "testConnBody" field.</summary>
    public const int TestConnBodyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.TcpRequestMessage.Types.TestConnBody TestConnBody {
      get { return msgBodyCase_ == MsgBodyOneofCase.TestConnBody ? (global::FsxProtocol.TcpRequestMessage.Types.TestConnBody) msgBody_ : null; }
      set {
        msgBody_ = value;
        msgBodyCase_ = value == null ? MsgBodyOneofCase.None : MsgBodyOneofCase.TestConnBody;
      }
    }

    private object msgBody_;
    /// <summary>Enum of possible cases for the "msgBody" oneof.</summary>
    public enum MsgBodyOneofCase {
      None = 0,
      SetConfigBody = 2,
      PingBody = 3,
      TestConnBody = 4,
    }
    private MsgBodyOneofCase msgBodyCase_ = MsgBodyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBodyOneofCase MsgBodyCase {
      get { return msgBodyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgBody() {
      msgBodyCase_ = MsgBodyOneofCase.None;
      msgBody_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpRequestMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpRequestMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (!object.Equals(SetConfigBody, other.SetConfigBody)) return false;
      if (!object.Equals(PingBody, other.PingBody)) return false;
      if (!object.Equals(TestConnBody, other.TestConnBody)) return false;
      if (MsgBodyCase != other.MsgBodyCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (msgBodyCase_ == MsgBodyOneofCase.SetConfigBody) hash ^= SetConfigBody.GetHashCode();
      if (msgBodyCase_ == MsgBodyOneofCase.PingBody) hash ^= PingBody.GetHashCode();
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnBody) hash ^= TestConnBody.GetHashCode();
      hash ^= (int) msgBodyCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.SetConfigBody) {
        output.WriteRawTag(18);
        output.WriteMessage(SetConfigBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.PingBody) {
        output.WriteRawTag(26);
        output.WriteMessage(PingBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnBody) {
        output.WriteRawTag(34);
        output.WriteMessage(TestConnBody);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.SetConfigBody) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetConfigBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.PingBody) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnBody) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestConnBody);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpRequestMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      switch (other.MsgBodyCase) {
        case MsgBodyOneofCase.SetConfigBody:
          SetConfigBody = other.SetConfigBody;
          break;
        case MsgBodyOneofCase.PingBody:
          PingBody = other.PingBody;
          break;
        case MsgBodyOneofCase.TestConnBody:
          TestConnBody = other.TestConnBody;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            msgType_ = (global::FsxProtocol.TcpRequestMessage.Types.MsgType) input.ReadEnum();
            break;
          }
          case 18: {
            global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody subBuilder = new global::FsxProtocol.TcpRequestMessage.Types.SetConfigBody();
            if (msgBodyCase_ == MsgBodyOneofCase.SetConfigBody) {
              subBuilder.MergeFrom(SetConfigBody);
            }
            input.ReadMessage(subBuilder);
            SetConfigBody = subBuilder;
            break;
          }
          case 26: {
            global::FsxProtocol.TcpRequestMessage.Types.PingBody subBuilder = new global::FsxProtocol.TcpRequestMessage.Types.PingBody();
            if (msgBodyCase_ == MsgBodyOneofCase.PingBody) {
              subBuilder.MergeFrom(PingBody);
            }
            input.ReadMessage(subBuilder);
            PingBody = subBuilder;
            break;
          }
          case 34: {
            global::FsxProtocol.TcpRequestMessage.Types.TestConnBody subBuilder = new global::FsxProtocol.TcpRequestMessage.Types.TestConnBody();
            if (msgBodyCase_ == MsgBodyOneofCase.TestConnBody) {
              subBuilder.MergeFrom(TestConnBody);
            }
            input.ReadMessage(subBuilder);
            TestConnBody = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TcpRequestMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MsgType {
        [pbr::OriginalName("MSG_TYPE_SET_CONFIG")] SetConfig = 0,
        [pbr::OriginalName("MSG_TYPE_PING")] Ping = 1,
        [pbr::OriginalName("MSG_TYPE_TEST_CONNECTION")] TestConnection = 2,
      }

      public sealed partial class SetConfigBody : pb::IMessage<SetConfigBody> {
        private static readonly pb::MessageParser<SetConfigBody> _parser = new pb::MessageParser<SetConfigBody>(() => new SetConfigBody());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetConfigBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FsxProtocol.TcpRequestMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetConfigBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetConfigBody(SetConfigBody other) : this() {
          udpPort_ = other.udpPort_;
          udpToken_ = other.udpToken_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetConfigBody Clone() {
          return new SetConfigBody(this);
        }

        /// <summary>Field number for the "udpPort" field.</summary>
        public const int UdpPortFieldNumber = 1;
        private int udpPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UdpPort {
          get { return udpPort_; }
          set {
            udpPort_ = value;
          }
        }

        /// <summary>Field number for the "udpToken" field.</summary>
        public const int UdpTokenFieldNumber = 2;
        private int udpToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UdpToken {
          get { return udpToken_; }
          set {
            udpToken_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetConfigBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetConfigBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UdpPort != other.UdpPort) return false;
          if (UdpToken != other.UdpToken) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UdpPort != 0) hash ^= UdpPort.GetHashCode();
          if (UdpToken != 0) hash ^= UdpToken.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UdpPort != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(UdpPort);
          }
          if (UdpToken != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(UdpToken);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UdpPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UdpPort);
          }
          if (UdpToken != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UdpToken);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetConfigBody other) {
          if (other == null) {
            return;
          }
          if (other.UdpPort != 0) {
            UdpPort = other.UdpPort;
          }
          if (other.UdpToken != 0) {
            UdpToken = other.UdpToken;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UdpPort = input.ReadInt32();
                break;
              }
              case 16: {
                UdpToken = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PingBody : pb::IMessage<PingBody> {
        private static readonly pb::MessageParser<PingBody> _parser = new pb::MessageParser<PingBody>(() => new PingBody());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PingBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FsxProtocol.TcpRequestMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingBody(PingBody other) : this() {
          timeStamp_ = other.timeStamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PingBody Clone() {
          return new PingBody(this);
        }

        /// <summary>Field number for the "timeStamp" field.</summary>
        public const int TimeStampFieldNumber = 1;
        private int timeStamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TimeStamp {
          get { return timeStamp_; }
          set {
            timeStamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PingBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PingBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimeStamp != other.TimeStamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimeStamp != 0) hash ^= TimeStamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TimeStamp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TimeStamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimeStamp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeStamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PingBody other) {
          if (other == null) {
            return;
          }
          if (other.TimeStamp != 0) {
            TimeStamp = other.TimeStamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TimeStamp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TestConnBody : pb::IMessage<TestConnBody> {
        private static readonly pb::MessageParser<TestConnBody> _parser = new pb::MessageParser<TestConnBody>(() => new TestConnBody());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TestConnBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FsxProtocol.TcpRequestMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnBody(TestConnBody other) : this() {
          magicToken_ = other.magicToken_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnBody Clone() {
          return new TestConnBody(this);
        }

        /// <summary>Field number for the "magicToken" field.</summary>
        public const int MagicTokenFieldNumber = 1;
        private int magicToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MagicToken {
          get { return magicToken_; }
          set {
            magicToken_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TestConnBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TestConnBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MagicToken != other.MagicToken) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MagicToken != 0) hash ^= MagicToken.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MagicToken != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MagicToken);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MagicToken != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicToken);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TestConnBody other) {
          if (other == null) {
            return;
          }
          if (other.MagicToken != 0) {
            MagicToken = other.MagicToken;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MagicToken = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TcpResponseMessage : pb::IMessage<TcpResponseMessage> {
    private static readonly pb::MessageParser<TcpResponseMessage> _parser = new pb::MessageParser<TcpResponseMessage>(() => new TcpResponseMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpResponseMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FsxProtocol.FsxReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpResponseMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpResponseMessage(TcpResponseMessage other) : this() {
      success_ = other.success_;
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpResponseMessage Clone() {
      return new TcpResponseMessage(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private int timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpResponseMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpResponseMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (TimeStamp != 0) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (TimeStamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (TimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpResponseMessage other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.TimeStamp != 0) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            TimeStamp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpResponseMessage : pb::IMessage<UdpResponseMessage> {
    private static readonly pb::MessageParser<UdpResponseMessage> _parser = new pb::MessageParser<UdpResponseMessage>(() => new UdpResponseMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpResponseMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FsxProtocol.FsxReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpResponseMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpResponseMessage(UdpResponseMessage other) : this() {
      msgType_ = other.msgType_;
      serialNumber_ = other.serialNumber_;
      token_ = other.token_;
      switch (other.MsgBodyCase) {
        case MsgBodyOneofCase.TestConnCallbackBody:
          TestConnCallbackBody = other.TestConnCallbackBody.Clone();
          break;
        case MsgBodyOneofCase.TransmissionDataBody:
          TransmissionDataBody = other.TransmissionDataBody.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpResponseMessage Clone() {
      return new UdpResponseMessage(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private global::FsxProtocol.UdpResponseMessage.Types.MsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.UdpResponseMessage.Types.MsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 2;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private int token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "testConnCallbackBody" field.</summary>
    public const int TestConnCallbackBodyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody TestConnCallbackBody {
      get { return msgBodyCase_ == MsgBodyOneofCase.TestConnCallbackBody ? (global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody) msgBody_ : null; }
      set {
        msgBody_ = value;
        msgBodyCase_ = value == null ? MsgBodyOneofCase.None : MsgBodyOneofCase.TestConnCallbackBody;
      }
    }

    /// <summary>Field number for the "transmissionDataBody" field.</summary>
    public const int TransmissionDataBodyFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody TransmissionDataBody {
      get { return msgBodyCase_ == MsgBodyOneofCase.TransmissionDataBody ? (global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody) msgBody_ : null; }
      set {
        msgBody_ = value;
        msgBodyCase_ = value == null ? MsgBodyOneofCase.None : MsgBodyOneofCase.TransmissionDataBody;
      }
    }

    private object msgBody_;
    /// <summary>Enum of possible cases for the "msgBody" oneof.</summary>
    public enum MsgBodyOneofCase {
      None = 0,
      TestConnCallbackBody = 4,
      TransmissionDataBody = 5,
    }
    private MsgBodyOneofCase msgBodyCase_ = MsgBodyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBodyOneofCase MsgBodyCase {
      get { return msgBodyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgBody() {
      msgBodyCase_ = MsgBodyOneofCase.None;
      msgBody_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpResponseMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpResponseMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(TestConnCallbackBody, other.TestConnCallbackBody)) return false;
      if (!object.Equals(TransmissionDataBody, other.TransmissionDataBody)) return false;
      if (MsgBodyCase != other.MsgBodyCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (Token != 0) hash ^= Token.GetHashCode();
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnCallbackBody) hash ^= TestConnCallbackBody.GetHashCode();
      if (msgBodyCase_ == MsgBodyOneofCase.TransmissionDataBody) hash ^= TransmissionDataBody.GetHashCode();
      hash ^= (int) msgBodyCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (SerialNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerialNumber);
      }
      if (Token != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Token);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnCallbackBody) {
        output.WriteRawTag(34);
        output.WriteMessage(TestConnCallbackBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TransmissionDataBody) {
        output.WriteRawTag(42);
        output.WriteMessage(TransmissionDataBody);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Token);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TestConnCallbackBody) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestConnCallbackBody);
      }
      if (msgBodyCase_ == MsgBodyOneofCase.TransmissionDataBody) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransmissionDataBody);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpResponseMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      switch (other.MsgBodyCase) {
        case MsgBodyOneofCase.TestConnCallbackBody:
          TestConnCallbackBody = other.TestConnCallbackBody;
          break;
        case MsgBodyOneofCase.TransmissionDataBody:
          TransmissionDataBody = other.TransmissionDataBody;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            msgType_ = (global::FsxProtocol.UdpResponseMessage.Types.MsgType) input.ReadEnum();
            break;
          }
          case 16: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 24: {
            Token = input.ReadInt32();
            break;
          }
          case 34: {
            global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody subBuilder = new global::FsxProtocol.UdpResponseMessage.Types.TestConnCallbackBody();
            if (msgBodyCase_ == MsgBodyOneofCase.TestConnCallbackBody) {
              subBuilder.MergeFrom(TestConnCallbackBody);
            }
            input.ReadMessage(subBuilder);
            TestConnCallbackBody = subBuilder;
            break;
          }
          case 42: {
            global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody subBuilder = new global::FsxProtocol.UdpResponseMessage.Types.TransmissionDataBody();
            if (msgBodyCase_ == MsgBodyOneofCase.TransmissionDataBody) {
              subBuilder.MergeFrom(TransmissionDataBody);
            }
            input.ReadMessage(subBuilder);
            TransmissionDataBody = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UdpResponseMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MsgType {
        [pbr::OriginalName("MSG_TYPE_TEST_CONNECTION_CALLBACK")] TestConnectionCallback = 0,
        [pbr::OriginalName("MSG_TYPE_TRANSMISSION_DATA")] TransmissionData = 1,
      }

      public sealed partial class TestConnCallbackBody : pb::IMessage<TestConnCallbackBody> {
        private static readonly pb::MessageParser<TestConnCallbackBody> _parser = new pb::MessageParser<TestConnCallbackBody>(() => new TestConnCallbackBody());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TestConnCallbackBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FsxProtocol.UdpResponseMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnCallbackBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnCallbackBody(TestConnCallbackBody other) : this() {
          magicToken_ = other.magicToken_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestConnCallbackBody Clone() {
          return new TestConnCallbackBody(this);
        }

        /// <summary>Field number for the "magicToken" field.</summary>
        public const int MagicTokenFieldNumber = 1;
        private int magicToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MagicToken {
          get { return magicToken_; }
          set {
            magicToken_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TestConnCallbackBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TestConnCallbackBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MagicToken != other.MagicToken) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MagicToken != 0) hash ^= MagicToken.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MagicToken != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MagicToken);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MagicToken != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicToken);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TestConnCallbackBody other) {
          if (other == null) {
            return;
          }
          if (other.MagicToken != 0) {
            MagicToken = other.MagicToken;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MagicToken = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TransmissionDataBody : pb::IMessage<TransmissionDataBody> {
        private static readonly pb::MessageParser<TransmissionDataBody> _parser = new pb::MessageParser<TransmissionDataBody>(() => new TransmissionDataBody());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TransmissionDataBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FsxProtocol.UdpResponseMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TransmissionDataBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TransmissionDataBody(TransmissionDataBody other) : this() {
          xAcceleration_ = other.xAcceleration_;
          yAcceleration_ = other.yAcceleration_;
          zAcceleration_ = other.zAcceleration_;
          pitchVelocity_ = other.pitchVelocity_;
          rollVelocity_ = other.rollVelocity_;
          yawVelocity_ = other.yawVelocity_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TransmissionDataBody Clone() {
          return new TransmissionDataBody(this);
        }

        /// <summary>Field number for the "xAcceleration" field.</summary>
        public const int XAccelerationFieldNumber = 1;
        private double xAcceleration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double XAcceleration {
          get { return xAcceleration_; }
          set {
            xAcceleration_ = value;
          }
        }

        /// <summary>Field number for the "yAcceleration" field.</summary>
        public const int YAccelerationFieldNumber = 2;
        private double yAcceleration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double YAcceleration {
          get { return yAcceleration_; }
          set {
            yAcceleration_ = value;
          }
        }

        /// <summary>Field number for the "zAcceleration" field.</summary>
        public const int ZAccelerationFieldNumber = 3;
        private double zAcceleration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double ZAcceleration {
          get { return zAcceleration_; }
          set {
            zAcceleration_ = value;
          }
        }

        /// <summary>Field number for the "pitchVelocity" field.</summary>
        public const int PitchVelocityFieldNumber = 4;
        private double pitchVelocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PitchVelocity {
          get { return pitchVelocity_; }
          set {
            pitchVelocity_ = value;
          }
        }

        /// <summary>Field number for the "rollVelocity" field.</summary>
        public const int RollVelocityFieldNumber = 5;
        private double rollVelocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RollVelocity {
          get { return rollVelocity_; }
          set {
            rollVelocity_ = value;
          }
        }

        /// <summary>Field number for the "yawVelocity" field.</summary>
        public const int YawVelocityFieldNumber = 6;
        private double yawVelocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double YawVelocity {
          get { return yawVelocity_; }
          set {
            yawVelocity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TransmissionDataBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TransmissionDataBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (XAcceleration != other.XAcceleration) return false;
          if (YAcceleration != other.YAcceleration) return false;
          if (ZAcceleration != other.ZAcceleration) return false;
          if (PitchVelocity != other.PitchVelocity) return false;
          if (RollVelocity != other.RollVelocity) return false;
          if (YawVelocity != other.YawVelocity) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (XAcceleration != 0D) hash ^= XAcceleration.GetHashCode();
          if (YAcceleration != 0D) hash ^= YAcceleration.GetHashCode();
          if (ZAcceleration != 0D) hash ^= ZAcceleration.GetHashCode();
          if (PitchVelocity != 0D) hash ^= PitchVelocity.GetHashCode();
          if (RollVelocity != 0D) hash ^= RollVelocity.GetHashCode();
          if (YawVelocity != 0D) hash ^= YawVelocity.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (XAcceleration != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(XAcceleration);
          }
          if (YAcceleration != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(YAcceleration);
          }
          if (ZAcceleration != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(ZAcceleration);
          }
          if (PitchVelocity != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(PitchVelocity);
          }
          if (RollVelocity != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(RollVelocity);
          }
          if (YawVelocity != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(YawVelocity);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (XAcceleration != 0D) {
            size += 1 + 8;
          }
          if (YAcceleration != 0D) {
            size += 1 + 8;
          }
          if (ZAcceleration != 0D) {
            size += 1 + 8;
          }
          if (PitchVelocity != 0D) {
            size += 1 + 8;
          }
          if (RollVelocity != 0D) {
            size += 1 + 8;
          }
          if (YawVelocity != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TransmissionDataBody other) {
          if (other == null) {
            return;
          }
          if (other.XAcceleration != 0D) {
            XAcceleration = other.XAcceleration;
          }
          if (other.YAcceleration != 0D) {
            YAcceleration = other.YAcceleration;
          }
          if (other.ZAcceleration != 0D) {
            ZAcceleration = other.ZAcceleration;
          }
          if (other.PitchVelocity != 0D) {
            PitchVelocity = other.PitchVelocity;
          }
          if (other.RollVelocity != 0D) {
            RollVelocity = other.RollVelocity;
          }
          if (other.YawVelocity != 0D) {
            YawVelocity = other.YawVelocity;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                XAcceleration = input.ReadDouble();
                break;
              }
              case 17: {
                YAcceleration = input.ReadDouble();
                break;
              }
              case 25: {
                ZAcceleration = input.ReadDouble();
                break;
              }
              case 33: {
                PitchVelocity = input.ReadDouble();
                break;
              }
              case 41: {
                RollVelocity = input.ReadDouble();
                break;
              }
              case 49: {
                YawVelocity = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
